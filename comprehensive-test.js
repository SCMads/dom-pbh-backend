// comprehensive-test.js - Test all improvements with real DOM PBH patterns
const { DOMPBHScraper } = require('./scraper');

// Mock data that closely matches the real patterns from the image
const realPatternTests = [
  {
    title: "ATOS DO PREFEITO",
    content: "Exonera Ariadna Miranda Val√©rio Andrade, BM-324.917-2, do cargo em comiss√£o DAM 3, c√≥digo n¬∫ DAM.003, da chefia da Secretaria Municipal de Administra√ß√£o Regional Venda Nova.",
    expected: {
      person: "Ariadna Miranda Val√©rio Andrade",
      matricula: "BM-324.917-2", 
      position: "DAM 3",
      codigo: "DAM.003"
    }
  },
  {
    title: "ATOS DO PREFEITO",
    content: "Exonera Breno Seroa da Motta, do cargo em comiss√£o de Diretor, c√≥digo n¬∫ DIR.012, da chefia da Secretaria Municipal de Pol√≠tica Urbana.",
    expected: {
      person: "Breno Seroa da Motta",
      position: "Diretor",
      codigo: "DIR.012"
    }
  },
  {
    title: "ATOS DO PREFEITO", 
    content: "Exonera Nat√°lia Souza Diniz Alves, do cargo em comiss√£o DAM 4, da chefia da Secretaria Municipal de Assist√™ncia Social.",
    expected: {
      person: "Nat√°lia Souza Diniz Alves",
      position: "DAM 4"
    }
  },
  {
    title: "ATOS DO PREFEITO",
    content: "Exonera Jo√£o Carlos Santos Silva, BM-123.456-7, do cargo em comiss√£o de Coordenador, c√≥digo n¬∫ COORD.045, da chefia da Secretaria Municipal de Sa√∫de.",
    expected: {
      person: "Jo√£o Carlos Santos Silva",
      matricula: "BM-123.456-7",
      position: "Coordenador", 
      codigo: "COORD.045",
      organ: "Secretaria Municipal de Sa√∫de"
    }
  },
  {
    title: "ATOS DO PREFEITO",
    content: "Exonera Maria Fernanda Costa Oliveira, BM-987.654-3, do cargo em comiss√£o Assessor T√©cnico, c√≥digo n¬∫ AT.089, da chefia da Secretaria Municipal de Educa√ß√£o.",
    expected: {
      person: "Maria Fernanda Costa Oliveira",
      matricula: "BM-987.654-3",
      position: "Assessor T√©cnico",
      codigo: "AT.089"
    }
  },
  {
    title: "ATOS DO PREFEITO",
    content: "Exonera Pedro Henrique Almeida, BM-555.123-9, do cargo em comiss√£o de Gerente, c√≥digo n¬∫ GER.234, da chefia da Secretaria Municipal de Meio Ambiente.",
    expected: {
      person: "Pedro Henrique Almeida", 
      matricula: "BM-555.123-9",
      position: "Gerente",
      codigo: "GER.234"
    }
  },
  {
    title: "ATOS DO PREFEITO",
    content: "Exonera Ana Paula da Silva Santos, BM-777.888-1, do cargo em comiss√£o de Diretora Adjunta, c√≥digo n¬∫ DA.156, da chefia da Secretaria Municipal de Cultura.",
    expected: {
      person: "Ana Paula da Silva Santos",
      matricula: "BM-777.888-1",
      position: "Diretora Adjunta",
      codigo: "DA.156"
    }
  },
  {
    title: "ATOS DO PREFEITO", 
    content: "Exonera Carlos Eduardo Ferreira, do cargo em comiss√£o de Assessor Especial, c√≥digo n¬∫ AE.789, da chefia do Gabinete do Prefeito.",
    expected: {
      person: "Carlos Eduardo Ferreira",
      position: "Assessor Especial",
      codigo: "AE.789"
    }
  }
];

async function runComprehensiveTest() {
  console.log('üöÄ Teste Abrangente - Algoritmo DOM PBH v2.0\n');
  console.log('‚ïê'.repeat(60));
  
  const scraper = new DOMPBHScraper();
  let passedTests = 0;
  let totalTests = realPatternTests.length;
  
  console.log(`\nüìã Testando ${totalTests} padr√µes reais de exonera√ß√£o...\n`);
  
  for (let i = 0; i < realPatternTests.length; i++) {
    const test = realPatternTests[i];
    console.log(`Test ${i + 1}/${totalTests}: ${test.expected.person || 'Teste ' + (i+1)}`);
    console.log(`Texto: "${test.content.substring(0, 80)}..."`);
    
    const result = scraper.processResult(test, "exonera");
    
    // Verificar se todos os campos esperados foram extra√≠dos
    let testPassed = true;
    let details = [];
    
    // Check person
    if (test.expected.person) {
      const personMatch = result.person === test.expected.person;
      details.push(`üë§ Pessoa: ${personMatch ? '‚úÖ' : '‚ùå'} ${result.person || 'n√£o extra√≠da'}`);
      if (!personMatch) testPassed = false;
    }
    
    // Check matricula  
    if (test.expected.matricula) {
      const matriculaMatch = result.matricula === test.expected.matricula;
      details.push(`üÜî Matr√≠cula: ${matriculaMatch ? '‚úÖ' : '‚ùå'} ${result.matricula || 'n√£o extra√≠da'}`);
      if (!matriculaMatch) testPassed = false;
    }
    
    // Check position
    if (test.expected.position) {
      const positionMatch = result.position === test.expected.position;
      details.push(`üíº Cargo: ${positionMatch ? '‚úÖ' : '‚ùå'} ${result.position || 'n√£o extra√≠do'}`);
      if (!positionMatch) testPassed = false;
    }
    
    // Check codigo
    if (test.expected.codigo) {
      const codigoMatch = result.codigo === test.expected.codigo;
      details.push(`üî¢ C√≥digo: ${codigoMatch ? '‚úÖ' : '‚ùå'} ${result.codigo || 'n√£o extra√≠do'}`);
      if (!codigoMatch) testPassed = false;
    }
    
    // Check organ
    if (test.expected.organ) {
      const organMatch = result.organ === test.expected.organ;
      details.push(`üè¢ √ìrg√£o: ${organMatch ? '‚úÖ' : '‚ùå'} ${result.organ || 'n√£o extra√≠do'}`);
      if (!organMatch) testPassed = false;
    }
    
    // Display results
    details.forEach(detail => console.log(`   ${detail}`));
    console.log(`   üìä Score: ${result.score || 0}/100`);
    console.log(`   üéØ Resultado: ${testPassed ? '‚úÖ PASSOU' : '‚ùå FALHOU'}`);
    console.log('');
    
    if (testPassed) passedTests++;
  }
  
  // Resultados finais
  console.log('‚ïê'.repeat(60));
  console.log(`\nüìä RESULTADOS FINAIS:`);
  console.log(`‚úÖ Testes aprovados: ${passedTests}/${totalTests} (${(passedTests/totalTests*100).toFixed(1)}%)`);
  console.log(`‚ùå Testes falharam: ${totalTests - passedTests}/${totalTests}`);
  
  if (passedTests === totalTests) {
    console.log('\nüéâ SUCESSO! Todos os padr√µes reais foram capturados corretamente!');
    console.log('‚ú® O algoritmo est√° pronto para capturar as 8+ exonera√ß√µes da imagem de refer√™ncia.');
  } else {
    console.log('\n‚ö†Ô∏è Alguns testes falharam. Revis√£o necess√°ria.');
  }
  
  console.log('\n' + '‚ïê'.repeat(60));
}

// Test false positives 
async function testFalsePositives() {
  console.log('\nüõ°Ô∏è Testando rejei√ß√£o de falsos positivos...\n');
  
  const scraper = new DOMPBHScraper();
  const falsePositiveTexts = [
    "Prefeitura de Belo Horizonte - Secretaria Municipal",
    "DOM PBH - Di√°rio Oficial do Munic√≠pio",
    "Belo Horizonte, 15 de janeiro de 2025",
    "Secretaria Municipal de Administra√ß√£o", 
    "Atos do Poder Executivo Municipal"
  ];
  
  falsePositiveTexts.forEach((text, i) => {
    const result = scraper.processResult({title: "Aviso", content: text}, "teste");
    const isNomeacao = result.category === 'nomeacao';
    console.log(`${i+1}. "${text}"`);
    console.log(`   Resultado: ${isNomeacao ? '‚ùå Falso positivo detectado!' : '‚úÖ Corretamente rejeitado'}`);
  });
}

// Run all tests
if (require.main === module) {
  runComprehensiveTest().then(() => {
    testFalsePositives();
  });
}

module.exports = { runComprehensiveTest, testFalsePositives };