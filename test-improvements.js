// test-improvements.js - Testar melhorias na detec√ß√£o de nomea√ß√µes
const { DOMPBHScraper } = require('./scraper.js');

// Dados de teste com exemplos reais de nomea√ß√µes
const testData = [
  {
    title: "PORTARIA N¬∫ 001/2025 - NOMEA√á√ÉO",
    content: "O Secret√°rio Municipal de Administra√ß√£o, no uso de suas atribui√ß√µes, resolve: NOMEAR MARIA JOS√â SILVA para exercer o cargo de Analista de Pol√≠ticas P√∫blicas na Secretaria Municipal de Sa√∫de.",
    expectedPerson: "MARIA JOS√â SILVA",
    expectedPosition: "Analista de Pol√≠ticas P√∫blicas",
    expectedOrgan: "Secretaria Municipal de Sa√∫de"
  },
  {
    title: "DECRETO DE EXONERA√á√ÉO N¬∫ 002/2025",
    content: "EXONERAR, a pedido, JO√ÉO CARLOS DOS SANTOS do cargo de Diretor de Departamento junto √† Secretaria Municipal de Obras e Infraestrutura.",
    expectedPerson: "JO√ÉO CARLOS DOS SANTOS",
    expectedPosition: "Diretor de Departamento",
    expectedOrgan: "Secretaria Municipal de Obras e Infraestrutura"
  },
  {
    title: "ATO DE DESIGNA√á√ÉO",
    content: "Designar a servidora ANA PAULA OLIVEIRA COSTA para a fun√ß√£o comissionada de Coordenadora do Setor de Recursos Humanos, cargo comissionado CC-3.",
    expectedPerson: "ANA PAULA OLIVEIRA COSTA",
    expectedPosition: "Coordenadora do Setor de Recursos Humanos",
    expectedOrgan: null
  },
  {
    title: "LISTA DE NOMEA√á√ïES - CONCURSO P√öBLICO",
    content: "CONVOCA√á√ÉO DE APROVADOS:\nPEDRO HENRIQUE DA SILVA - Fiscal de Tributos - Secretaria Municipal de Fazenda\nMARIA FERNANDA SANTOS - Professora - Secretaria Municipal de Educa√ß√£o",
    expectedPerson: "PEDRO HENRIQUE DA SILVA",
    expectedPosition: "Fiscal de Tributos",
    expectedOrgan: "Secretaria Municipal de Fazenda"
  },
  {
    title: "Edital de Licita√ß√£o",
    content: "Processo licitat√≥rio para contrata√ß√£o de empresa para fornecimento de material de escrit√≥rio. Valor estimado: R$ 50.000,00",
    expectedPerson: null, // N√£o deve detectar nomea√ß√£o
    expectedPosition: null,
    expectedOrgan: null
  }
];

async function testImprovements() {
  console.log('üß™ Testando melhorias na detec√ß√£o de nomea√ß√µes...\n');
  
  const scraper = new DOMPBHScraper();
  let successCount = 0;
  let totalTests = testData.length;
  
  for (let i = 0; i < testData.length; i++) {
    const test = testData[i];
    console.log(`\nüìã Teste ${i + 1}: ${test.title}`);
    console.log(`üìÑ Conte√∫do: ${test.content.substring(0, 100)}...`);
    
    // Processar o resultado
    const result = scraper.processResult({
      title: test.title,
      content: test.content,
      url: null
    }, 'nomea√ß√£o');
    
    console.log(`üîç Resultado:`);
    console.log(`   Tipo: ${result.type}`);
    console.log(`   Categoria: ${result.category}`);
    console.log(`   Pessoa: ${result.person || 'N√£o encontrada'}`);
    console.log(`   Cargo: ${result.position || 'N√£o encontrado'}`);
    console.log(`   √ìrg√£o: ${result.organ || 'N√£o encontrado'}`);
    console.log(`   Tipo de A√ß√£o: ${result.actionType || 'N√£o detectado'}`);
    
    // Verificar se √© nomea√ß√£o quando deveria ser
    const shouldBeNomination = test.expectedPerson !== null;
    const isDetectedAsNomination = result.category === 'nomeacao';
    
    if (shouldBeNomination === isDetectedAsNomination) {
      console.log(`‚úÖ Detec√ß√£o de categoria: CORRETO`);
      
      // Verificar detalhes apenas se for uma nomea√ß√£o
      if (shouldBeNomination) {
        let detailsCorrect = true;
        
        if (test.expectedPerson && !result.person) {
          console.log(`‚ùå Nome esperado: ${test.expectedPerson}, encontrado: ${result.person || 'nenhum'}`);
          detailsCorrect = false;
        } else if (test.expectedPerson && result.person) {
          console.log(`‚úÖ Nome detectado: ${result.person}`);
        }
        
        if (test.expectedPosition && !result.position) {
          console.log(`‚ö†Ô∏è Cargo esperado: ${test.expectedPosition}, encontrado: ${result.position || 'nenhum'}`);
        } else if (result.position) {
          console.log(`‚úÖ Cargo detectado: ${result.position}`);
        }
        
        if (test.expectedOrgan && !result.organ) {
          console.log(`‚ö†Ô∏è √ìrg√£o esperado: ${test.expectedOrgan}, encontrado: ${result.organ || 'nenhum'}`);
        } else if (result.organ) {
          console.log(`‚úÖ √ìrg√£o detectado: ${result.organ}`);
        }
        
        if (detailsCorrect || result.person) {
          successCount++;
        }
      } else {
        successCount++;
      }
    } else {
      console.log(`‚ùå Detec√ß√£o de categoria: INCORRETO (esperado: ${shouldBeNomination ? 'nomea√ß√£o' : 'n√£o-nomea√ß√£o'}, obtido: ${isDetectedAsNomination ? 'nomea√ß√£o' : 'n√£o-nomea√ß√£o'})`);
    }
  }
  
  console.log(`\nüìä RESUMO DOS TESTES:`);
  console.log(`‚úÖ Sucessos: ${successCount}/${totalTests}`);
  console.log(`üìà Taxa de acerto: ${(successCount / totalTests * 100).toFixed(1)}%`);
  
  if (successCount === totalTests) {
    console.log(`üéâ Todos os testes passaram!`);
  } else {
    console.log(`‚ö†Ô∏è ${totalTests - successCount} teste(s) falharam. Verifique os padr√µes.`);
  }
}

// Executar testes
testImprovements().catch(console.error);